1) 

section .text
global _start
_start:
mov ecx, len
mov esi, s1
mov edi, s2
cld
rep movsb
mov edx, 20
mov ecx, s2
mov ebx, 1
mov eax, 4
int 0x80
mov eax,1
int 0x80
section .data
s1 db 'Hello,world!',0
len equ $-s1
section .bss
s2 resb 20


2)

section .text
global _start
_start:
mov esi, s1
mov edi, s2
mov ecx, lens2
cld
repe cmpsb
jecxz equal
mov eax, 4
mov ebx, 1
mov ecx, msg_neq
mov edx, len_neq
int 80h
jmp exit
equal:
mov eax, 4
mov ebx, 1
mov ecx, msg_eq
mov edx, len_eq
int 80h
exit:
mov eax, 1
mov ebx, 0
int 80h
section .data
s1 db 'Hello,world!',0;
lens1 equ $-s1
s2 db'Hello!',0;
lens2 equ $-s2
msg_eq db 'Strings are equal!',0xa
len_eq equ $-msg_eq
msg_neq db 'Strings are not equal!'
len_neq equ $-msg_neq


3)

section .text
global _start
_start:
mov ecx, len
mov esi, s1
mov edi, s2
loop_here:
lodsb
or al, 20h
stosb
loop loop_here
cld
rep movsb
mov edx, 20
mov ecx, s2
mov ebx, 1
mov eax, 4
int 0x80
mov eax, 1
int 0x80
section .data
s1 db 'Good morning',0
len equ $-s1
section .bss
s2 resb 20;destination


4)

section .text
global _start ;must be declared for using gcc
_start:      ;tell linker entry point
mov ecx,len
mov edi,my_string
mov al,'e'
cld
repne scasb
je found      ;when found
;If not then the following code
mov eax,4
mov ebx,1
mov ecx,msg_notfound
mov edx,len_notfound
int 80h
jmp exit
found:
mov eax,4
mov ebx,1
mov ecx,msg_found
mov edx,len_found
int 80h
exit:
mov eax,1
mov ebx,0
int 80h
section .data
my_string db 'hello world',0
len equ $-my_string
msg_found db 'found!',0xa
len_found equ $-msg_found
msg_notfound db 'not found!'
len_notfound equ $-msg_notfound


