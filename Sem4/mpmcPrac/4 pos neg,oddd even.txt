1)

%macro print 2
mov eax, 4
mov ebx, 1
mov ecx,%1
mov edx, %2
int 80h
%endmacro
section .data..............................................
arr dd -18888888h,18888888h, 22222222h, 11111111h
n equ 4
posmsg db 10, 13, "The count of positive numbers is "
poslen equ $ - posmsg
negmsg db 10, 13,"The count of negative numbers is "
neglen equ $ - negmsg
nwline db 10,13
section .bss
pcnt resq 1
ncnt resq 1
char_answer resb 8
section .text
global _start
_start:
mov esi, arr
mov edi, n
mov ebx, 0
mov ecx, 0
up:
mov eax, [esi]
cmp eax, 00000000
js negative
positive:
inc ebx
jmp next
negative:
inc ecx
next:
add esi, 4
dec edi
jnz up
mov [pcnt], ebx
mov [ncnt], ecx
;print posmsg, poslen
mov eax, [pcnt]
;print negmsg, neglen
mov eax, [ncnt]
mov eax,1
mov ebx, 0
int 80h

2)

section .text
global _start;must be declared for using gcc
_start: ;tell linker entry point
mov ax, 5h
and ax, 1 ;and ax with 1
jz evnn
mov eax, 4 ;system call number (sys_write)
mov ebx, 1 ;file descriptor (stdout)
mov ecx, odd_msg ;message to write
mov edx, len2 ;length of message
int 0x80 ;call kernel
jmp outprog
evnn:
mov ah, 09h
mov eax, 4 ;system call number (sys_write)
mov ebx, 1 ;file descriptor (stdout)
mov ecx, even_msg ;message to write
mov edx, len1 ;length of message
int 0x80 ;call kernel
outprog:
mov eax,1 ;system call number (sys_exit)
int 0x80 ;call kernel
section .data
even_msg db 'Even Number!' ;message showing even number
len1 equ $ - even_msg
odd_msg db 'Odd Number!' ;message showing odd number
len2 equ $ - odd_msg