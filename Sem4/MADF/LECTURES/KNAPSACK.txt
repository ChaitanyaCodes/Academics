KNAPSACK
AIM
Implementation of Knapsack Problem (Greedy Approach) and obtain its step count

THEORY
WHAT IS GREEDY METHOD
A greedy algorithm constructs a solution step-by-step and picks the most optimal path at every step.
Greedy Method Suggests:
1. Algorithm can be devised in stages, considering one input at each
stage
2. At each stage a decision is made to include an input or not ( If the
input leads to OS then input is considered or else its ignored)
3. This is done by considering the input in a particular order defined by
selection procedure (as per objective function of the P)

Feasible Solution (FS): Is a solution which satisfies the constraints of the problem
Optimal Solution (OS): Is a FS solution which maximizes or minimizes the objective
Function of P

Knapsack Problem:

Formal Definition:
1.	We are given with ‘n’ objects and a Knapsack(or bag) of capacity ‘m’ is given
2.	to us
3.	Associated with each object ‘i’ there is a weight ‘wi’ and profit ‘pi’ .
4.	Objective function is to fill up the bag so as to maximize the profit earned subject to the constraint that the sum of the weights of the chosen objects into the bag should not exceed the capacity of the bag.
5.	If a fraction xi (0<=xi<=1) of an object ‘i’ is chosen to include into the bag then a profit of pixi is earned.

There Are basically 4 feasible solutions possible
1: using random weights with constraint not Exceeding m
2: using least weight first with constraint not Exceeding m
3: using maximum profit first with constraint not Exceeding m
4: choosing the object with maximum profit/weight ration first with constraint not Exceeding m



Hence, the objective of this algorithm is to
maximize Summation(pixi)

 
subject to constraint, summation(wixi)<=W

  
It is clear that an optimal solution must fill the knapsack exactly, otherwise we could add a fraction of one of the remaining items and increase the overall profit.
Thus, an optimal solution can be obtained by

summation(wixi)=W

 
In this context, first we need to sort those items according to the value of pi/wi  so that 
P(i+1)/W(i+1)>pi/wi
 
Here, x is an array to store the fraction of items.

Applications
In many cases of resource allocation along with some constraint, the problem can be derived in a similar way of Knapsack problem. Following is a set of example.
•	Finding the least wasteful way to cut raw materials
•	portfolio optimization
•	Cutting stock problems

ALGORITHM
Algoritm KnapSack(n,m,w,p)
{
   // n is no weights
   // m is knapsack size
    // w is array of weights 
    // p is array of profits
    // (p[i]/[w[i]])>=(p[i+1]/w[i+1])
    U:=m
    for i:=1 to n do
       x[i]:=0
    for i:=1 to n do
       if(w[i]>U) break;
       x[i]= 1;
       U=U-w[i];

    if(i<n) x[i] = U/w[i];
}

TIME COMPLEXITY
Analysis
If the provided items are already sorted into a decreasing order of pi/wi, then the while /for loop takes a time in O(n); Therefore, the total time including the sort is in 
O(n logn).

